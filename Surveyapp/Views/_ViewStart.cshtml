@inject SurveyContext _context
@using System.Linq
@using Surveyapp.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject RoleManager<IdentityRole> roleManagers;
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    /*if (await roleManagers.RoleExistsAsync("Admin") == false)
    {
        IdentityResult Admin = await roleManagers
            .CreateAsync(new IdentityRole
            {
                Name = "Admin",
            });
    }

    if (await roleManagers.RoleExistsAsync("Surveyor") == false)
    {
        IdentityResult Surveyor = await roleManagers
            .CreateAsync(new IdentityRole
            {
                Name = "Surveyor",
            });
    }

    if (await roleManagers.RoleExistsAsync("Surveyee") == false)
    {

        IdentityResult Surveyee = await roleManagers
            .CreateAsync(new IdentityRole
            {
                Name = "Surveyee",
            });
    }
    //add default admin
    var adminUser = UserManager.FindByEmailAsync("admin@gmail.com");
    if (adminUser.Result ==null)
    {
        var newAdminUser = new ApplicationUser()
        {
            UserName = "admin@gmail.com",
            Email = "admin@gmail.com",
            EmailConfirmed = true,
        };
        var creatNewUser = await UserManager.CreateAsync(newAdminUser, "Password12#");
        if (creatNewUser.Succeeded)
        {
            await UserManager.AddToRoleAsync(newAdminUser, "Admin");
        }
    }*/
    //remove users from other roles if has many roles
    if (User.Identity.IsAuthenticated)
    {
        var currentUser = UserManager.FindByNameAsync(User.Identity.Name);
        var rolesuser = await UserManager.GetRolesAsync(currentUser.Result);
        if (rolesuser.Count()>1)
        {
            for (var i =1; i<=(rolesuser.Count()-1);i++)
            {
                await UserManager.RemoveFromRoleAsync(currentUser.Result,rolesuser[i]);
            }
        }
    }
    
    Layout = "_Layout";
}
